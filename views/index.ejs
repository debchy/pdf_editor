<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">

  </head>
  <body>
    <div class="">
      <h1><%= title %></h1>
      <p>
        Load PDF: <input type="file" accept="application/pdf" name="load_pdf" id="load_pdf">
      </p>
      
      <div class="row" id="pdf-sign-panel" style="display: none;">
        <div class="col-md-8"><div id="designer"></div></div>
        <div class="col-md-4">
          <p>Sign Here</p>
          <div class="signature-canvas-container">
            <canvas id="SignatureCanvas" ></canvas>
            <button id="btnSignatureCanvasReset"><img src="/images/replace.png" style="width: 20px;"></button>  
          </div>
          
          <button id="btnAddCreatedSignature" class="btn btn-primary mb-2" style="display: none;">Add Signature</button>

          <button id="btnAddText" class="btn btn-secondary mb-1" style="display: none;">Add Text Signature</button>
          <button id="btnAddSignature" class="btn btn-secondary mb-1" style="display: none;">Add Image Signature</button>
          <button id="btnDownload" class="btn btn-success mb-1 mt-2" style="display: none;">Download PDF</button>
        </div>
      </div>
    </div>
    

  </body>
  <script src="/javascripts/@pdfme.ui.index.js"></script>
  <script src="/@pdfme/generator/dist/index.js"></script>
  <script src="/javascripts/signature-draw.js"></script>
  <script>
    // import { Designer, Template, checkTemplate } from "@pdfme/ui";
    // import { generate } from "@pdfme/generator";

    let template= {schemas: [], sampledata:[{}], columns:[], basePdf:""} ;
    let designer;
    //designer.current.onSaveTemplate(onSaveTemplate);
    const onChangeBasePDF = (e) => {
      if (e.target && e.target.files) {
        readFile(e.target.files[0], "dataURL").then(async (basePdf) => {          
          // designer.updateTemplate(
          //     Object.assign(cloneDeep(template.getTemplate()), {
          //       basePdf,
          //     })
          // );
          
          if(!designer){
            template.basePdf=basePdf;
            designer = new Designer({
              domContainer: document.getElementById("designer"),
              template
            });
            setTimeout(() => {
              document.getElementById("btnShowHideSidePanel").click();//on init, close the side panel
            }, 500);
          }else{
            designer.updateTemplate(
              Object.assign(cloneDeep(template), {
                basePdf,
              })
            );
          }
          
          document.getElementById("btnAddText").style.display="block";
          document.getElementById("btnAddSignature").style.display="block";
          document.getElementById("btnDownload").style.display="block";
          document.getElementById("btnAddCreatedSignature").style.display="block";
          document.getElementById("pdf-sign-panel").style.display="";
        });
      }
      
    };
    const onClick_btnAddText = (e) =>{
      document.getElementById("btnAddNewField").click()
    }
    const onClick_btnAddSignature = (e) =>{
      document.getElementById("btnAddNewImageField").click();
      // let ddlSelectType=document.getElementById('ddlSelectType');
      // ddlSelectType.options[1].selected = true;
      // ddlSelectType.onchange();
    }
    const onClick_btnAddCreatedSignature = (e) =>{
      document.getElementById("btnAddSignature").click();
      // let ddlSelectType=document.getElementById('ddlSelectType');
      // ddlSelectType.options[1].selected = true;
      // ddlSelectType.onchange();
    }
    const onClick_btnDownload = async (e) =>{
      if (designer) {
        const template = designer.getTemplate();
        const inputs = template.sampledata ?? [];
        const pdf = await generate({ template, inputs });
        const blob = new Blob([pdf.buffer], { type: "application/pdf" });
        var blobUrl = URL.createObjectURL(blob);
        var link = document.createElement("a"); // Or maybe get it from the current document
        link.id="auto_sign_download_link"
        link.href = blobUrl;
        link.download = "EditedPDF.pdf";
        link.innerHTML = "Click here to download the file";

        document.body.appendChild(link); // Or append it whereever you want
        document.querySelector('a#auto_sign_download_link').click() //can add an id to be specific if multiple anchor tag, and use #id
        document.querySelector('a#auto_sign_download_link').remove();
        //window.open(URL.createObjectURL(blob));
      }
    }
    document.getElementById("load_pdf").addEventListener("change",onChangeBasePDF);
    document.getElementById("btnAddText").addEventListener("click",onClick_btnAddText);
    document.getElementById("btnAddSignature").addEventListener("click",onClick_btnAddSignature);
    document.getElementById("btnAddCreatedSignature").addEventListener("click",onClick_btnAddCreatedSignature);
    document.getElementById("btnDownload").addEventListener("click",onClick_btnDownload);

    const cloneDeep = (obj) => JSON.parse(JSON.stringify(obj));
    const readFile = (  file,  type) => {
      return new Promise((r) => {
        const fileReader = new FileReader();
        fileReader.addEventListener("load", (e) => {
          if (e && e.target && e.target.result && file !== null) {
            r(e.target.result);
          }
        });
        if (file !== null) {
          if (type === "text") {
            fileReader.readAsText(file);
          } else if (type === "dataURL") {
            fileReader.readAsDataURL(file);
          } else if (type === "arrayBuffer") {
            fileReader.readAsArrayBuffer(file);
          }
        }
      });
    };

    
  </script>
</html>
